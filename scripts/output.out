ubuntu@ip-172-31-22-107:~/Documents/nsides/scripts$ ./run_all.sh
Starting file 1 / 4
100%|█████████████████████████████████████████| 220/220 [17:48<00:00,  4.86s/it]
Traceback (most recent call last):
  File "1.compute_file_maps.py", line 63, in <module>
    main()
  File "1.compute_file_maps.py", line 58, in main
    compute_offsides_map(archives_path, meta_path)
  File "1.compute_file_maps.py", line 29, in compute_offsides_map
    files_map.to_csv(meta_path.joinpath('file_map_offsides.csv'), index=False)
  File "/home/ubuntu/miniconda/envs/nsides/lib/python3.7/site-packages/pandas/co
re/generic.py", line 3228, in to_csv
    formatter.save()
  File "/home/ubuntu/miniconda/envs/nsides/lib/python3.7/site-packages/pandas/io
/formats/csvs.py", line 183, in save
    compression=self.compression,
  File "/home/ubuntu/miniconda/envs/nsides/lib/python3.7/site-packages/pandas/io
/common.py", line 399, in _get_handle
    f = open(path_or_buf, mode, encoding=encoding, newline="")
FileNotFoundError: [Errno 2] No such file or directory: '/data/meta/file_map_off
sides.csv'
Finished file 1
ubuntu@ip-172-31-22-107:~/Documents/nsides/scripts$ cat 1.compute_file_maps.py
import concurrent.futures
import functools
import pathlib
import sys

import pandas as pd
import tqdm

sys.path.insert(0, '../src/')
import parallel_utils  # noqa:E402


def compute_offsides_map(archives_path, meta_path):
    get_offsides_subfiles = functools.partial(parallel_utils.get_subfiles,
                                              n_drugs=1)

    archive_files = list(archives_path.glob('1/scores_*.tgz'))
    with concurrent.futures.ProcessPoolExecutor() as executor:
        file_locations = list(tqdm.tqdm(
            executor.map(get_offsides_subfiles, archive_files),
            total=len(archive_files)
        ))

    # Flatten the list of lists of tuples to a list of tuples
    file_locations = [i for l in file_locations for i in l]
    files_map = pd.DataFrame(file_locations,
                             columns=['drug', 'bootstrap', 'file_type',
                                      'file_name', 'archive_file'])
    files_map.to_csv(meta_path.joinpath('file_map_offsides.csv'), index=False)


def compute_twosides_map(archives_path, meta_path):
    get_twosides_subfiles = functools.partial(parallel_utils.get_subfiles,
                                              n_drugs=2)

    archive_files = list(archives_path.glob('2/scores_*.tgz'))
    with concurrent.futures.ProcessPoolExecutor() as executor:
        file_locations = list(tqdm.tqdm(
            executor.map(get_twosides_subfiles, archive_files),
            total=len(archive_files)
        ))

    # Flatten the list of lists of tuples to a list of tuples
    file_locations = [i for l in file_locations for i in l]
    files_map = pd.DataFrame(file_locations,
                             columns=['drug_index_1', 'drug_index_2',
                                      'file_type', 'file_name', 'archive_file'])
    files_map.to_csv(meta_path.joinpath('file_map_twosides.csv'), index=False)


def main():
    # Path to where the `.tgz` archives are stored
    archives_path = pathlib.Path('/data/archives/')

    # Path where the file maps will be saved
    meta_path = pathlib.Path('/data/meta')

    compute_offsides_map(archives_path, meta_path)
    compute_twosides_map(archives_path, meta_path)


if __name__ == "__main__":
    main()
ubuntu@ip-172-31-22-107:~/Documents/nsides/scripts$ less 1.compute_file_maps.py
ubuntu@ip-172-31-22-107:~/Documents/nsides/scripts$ vi 1.compute_file_maps.py
ubuntu@ip-172-31-22-107:~/Documents/nsides/scripts$

